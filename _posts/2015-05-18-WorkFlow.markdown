---
layout:     post
title:      "WorkFlow"
subtitle:   "Work"
date:       2015-05-18 22:27:00
author:     "chne"
header-img: "images/post-workflow-title.png"
---

对于自己目前在项目中所采用的开发工作流程其实一早就发现存在不少的问题，导致一个需求的开发流程走下来花费的时间太多。更重要的是中间很多环节是重复的而且还容易因为粗心的原因引入差错。终于今天，在花费一番不小的力气竟然只是为了完成一个小需求的代码提交功能前提下针对工作流的这个问题开始了反思。


<h2 class="section-heading">思绪图</h2>

<a href="#">
    <img src="{{ site.baseurl }}/images/post-workflow.png" alt="workflow">
</a>

<h3>现况</h3>

当前所采用的工作流程主要涉及到3个目录

+ Deploy目录
+ Code目录
+ Git目录

Deploy目录:  

这个目录的主要作用就是模拟实际运行时所处的环境，这样我们就可以在其中测试验证我们所开发的内容是否达到需求的要求。

Code目录:  

这个目录的作用则主要是Eclipse的工作区间，因为我们项目的发布是通过Ant来进行的虽然说原则上也是可以不通过Eclipse工具来进行直接发布但是对于已经习惯Eclipse这种可视化的IDE整个过程会变得更加简单和流畅。

Git目录:  
这个目录的作用则主要是为了确保本地能够有一份和远端Git仓库中完全一致的代码这样可以实现本地开发与代码提交分开避免因为两者都在同一个目录下造成不必要的混淆。


本来上面这三个目录的设立是为了避免因为目录的混用从而导致出现一些并不需要提交到远端的代码因为错误的操作而被提交上去，同时也是为了确保能够实时查看远端代码而不需要在Git中来回切换与保存。但是，在实际的使用过程中虽然避免了因为混用文件目录而导致的问题却引出了新的问题。因为工作目录的增加导致流程上步骤的增加同一个修改需要依次在Deploy>>>Code>>>Deploy>>>Git>>>Deploy目录之间来回测试，且因为目录之间切换操作的增多反而从本质上来说并没有降低误操作的概率。所以，需要再次思考是否有更好的办法能够解决目前的这些问题。

<h3>改进</h3>

之所以会出现上面的这些问题还是因为目录过多的问题或者说整个工作流的过程中需要竟可能的减少在不同目录之间的修改步骤，同时需要充分利用Git已有的功能。

为此做出了如下几个改变:

+ Code目录只作为发布用途，即每次用来取远端服务器最新代码发布到Deploy用作测试验证。
+ Deploy目录的代码修改全部通过Beyond Compare同步自Git目录，不直接对Deploy目录进行修改。
+ Git目录是唯一直接开发和修改的目录，同时不同的需求采用不同的分支进行开发和需求相关的所有修改都提交到此分支下。

Code目录的存在是因为需要通过Eclipse来进行发布，这一步目前无法避免所以只能通过尽量简化其功能来达到简化工作流的目的。

Deploy目录是唯一的功能验证地方，所以也是必须存在的。但是，为了确保不因为误操作而导致提交到Git远程仓库的内容和实际修改的内容出现不一致的情况Code/Deploy/Git目录的修改应该只来自同一地方即Git目录。

Git目录是最终提交发生的地方所以我们需要确保我们的修改是有效的经过验证的，所以我们在Git所做的修改都需要同步到Deploy目录下进行验证。同时，因为我们可能需要在同一时间范围内进行多个需求的开发所以需要我们善于利用Git中分支的这个概念。同一需求下的修改文件应该全部提交到此分支下，因为只有这样我们才能确保各分支之间的文件实现隔离避免互相干扰而且在Git中创建分支的成本是很低的即使有部分分支只是为了进行技术上的验证或者是尝试最终并不需要提交到远端Git仓库中我们只要删掉这个分支即可。
